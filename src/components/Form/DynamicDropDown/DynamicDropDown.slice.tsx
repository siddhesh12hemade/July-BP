import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import _ from "lodash";
import * as objectMapper from 'object-mapper';
import { Constants } from "../../../utils/constants/constants";
import { ApiResult } from "../../../utils/interfaces/App.interface";
import { getSession } from "../../../utils/libs/cognito";
import { CommonService } from "../../../utils/services/Common.Service";
import { RootState } from "../../../utils/store/store";
import { IInitialFormState } from "./DynamicDropDown.interface";

const initialState: IInitialFormState = {
  ongoingCalls: [],
  optionsState: {},
  loaderStatus: {},
  formState: {},
};

export const makeGenericGetCallAsync = createAsyncThunk(
  "generic/getCall",
  async (payload: any) => {
    const { url, state, urlObjectMapper, name } = payload;

    const requestPayload = objectMapper.merge(state, urlObjectMapper);

    let token = "";

    try {
      const userSession = await getSession();
      token = userSession.getIdToken().getJwtToken();
    } catch (error) {
      console.info("session token not available");
    }
    
    let headers = {}
    if (token) {
      headers = { Authorization: `Bearer ${token}` }
    }

    let checkForArray;
    _.map(Object.values(urlObjectMapper), (objectMapper) => {
      checkForArray = _.isArray(objectMapper);
    })
    let apiRes;
    if(checkForArray){
      let requestPayload = urlObjectMapper;
      if(!_.isEmpty(requestPayload)){
        apiRes = await CommonService.apiCall(
          {
            method:'post',
            api_url: `${url}`,
            headers: headers,
            data: requestPayload.fixedDistributionChannel
    
          }
        )
      }
      else{
        apiRes = await CommonService.apiCall(
          {
            method:'get',
            api_url: `${url}`,
            headers: headers
    
          }
        )
      }
       
    }
    else{
      let requestPayload = objectMapper.merge(state, urlObjectMapper);      
      apiRes = await CommonService.apiCall(
        {
          method:'get',
          api_url: `${url}/${_.get(requestPayload, name)}`,
          headers: headers
  
        }
      )
    }
    
    const response = apiRes
  
    return { status: true, message: "success", response, name, resetStateValues: requestPayload, };
  }
);

export const dynamicDropDownSlice = createSlice({
  name: "dropDown",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setState: (state, payload) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      const { key, value } = payload.payload;
      _.update(state, `${key}`, () => value)
    },
    reset: () => initialState
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: builder => {
    builder
      .addCase(makeGenericGetCallAsync.pending, (state, action) => {

        let loaderKey = _.get(action, 'meta.arg.name');
        _.update(state, "ongoingCalls", () => ([...state.ongoingCalls, loaderKey]));
        _.update(state, `loaderStatus.${loaderKey}`, () => 'loading')
        
      })
      .addCase(makeGenericGetCallAsync.fulfilled, (state, action) => {

        let result:ApiResult<any> = action.payload.response
        if(result.status === Constants.API_SUCCESS){
          const { name } = action.payload;
          const response = result.data
          let optionList = _.get(response, 'dropdown', []);
  
          optionList = _.isEmpty(optionList) ? Constants.DEFAULT_DROP_DOWN_OPTIONS : optionList;
  
          _.update(state, `optionsState.${name}`, () => optionList);
  
          _.update(state, `loaderStatus.${name}`, () => 'success')
          
          _.update(state, "ongoingCalls", () =>
            _.filter(state.ongoingCalls, e => e !== name)
          )
        }
        else{
          let loaderKey = _.get(action, 'meta.arg.name');
          _.update(state, `loaderStatus.${loaderKey}`, () => 'failed')
        }
        
      })
      .addCase(makeGenericGetCallAsync.rejected, (state, action) => {

        let loaderKey = _.get(action, 'meta.arg.name');

        _.update(state, `loaderStatus.${loaderKey}`, () => 'failed')
      })
  }
});

export const { setState, reset } = dynamicDropDownSlice.actions;

export const selectDropDownState = (state: RootState): IInitialFormState => state.dynamicDropDown;

export default dynamicDropDownSlice.reducer;
